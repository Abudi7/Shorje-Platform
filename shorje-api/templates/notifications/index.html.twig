{% extends 'base.html.twig' %}

{% block title %}الإشعارات - شورجي{% endblock %}

{% block body %}
<div class="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4 space-x-reverse">
                    <button onclick="history.back()" class="p-2 text-gray-600 hover:text-gray-900 rounded-lg hover:bg-gray-100">
                        <i class="fas fa-arrow-right"></i>
                    </button>
                        <div>
                        <h1 class="text-2xl font-bold text-gray-900">الإشعارات</h1>
                        <p class="text-sm text-gray-600">إدارة جميع إشعاراتك</p>
                    </div>
                </div>
                <div class="flex items-center space-x-3 space-x-reverse">
                    <button id="markAllReadBtn" class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
                        تعيين الكل كمقروء
                    </button>
                    <button id="refreshBtn" class="p-2 text-gray-600 hover:text-gray-900 rounded-lg hover:bg-gray-100">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex items-center space-x-4 space-x-reverse">
                <div class="flex items-center space-x-2 space-x-reverse">
                    <label class="text-sm font-medium text-gray-700">النوع:</label>
                    <select id="typeFilter" class="border border-gray-300 rounded-lg px-3 py-1 text-sm">
                        <option value="">الكل</option>
                        <option value="message">الرسائل</option>
                        <option value="follow">المتابعة</option>
                        <option value="product">المنتجات</option>
                        <option value="order">الطلبات</option>
                        <option value="review">التقييمات</option>
                        <option value="system">النظام</option>
                        <option value="security">الأمان</option>
                        <option value="promotion">العروض</option>
                    </select>
                </div>
                <div class="flex items-center space-x-2 space-x-reverse">
                    <label class="text-sm font-medium text-gray-700">الحالة:</label>
                    <select id="statusFilter" class="border border-gray-300 rounded-lg px-3 py-1 text-sm">
                        <option value="">الكل</option>
                        <option value="unread">غير مقروء</option>
                        <option value="read">مقروء</option>
                        <option value="important">مهم</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-primary-100 rounded-lg">
                        <i class="fas fa-bell text-primary-600 text-xl"></i>
                    </div>
                    <div class="mr-4">
                        <p class="text-sm font-medium text-gray-600">إجمالي الإشعارات</p>
                        <p id="totalNotifications" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
        </div>

            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-red-100 rounded-lg">
                        <i class="fas fa-exclamation-circle text-red-600 text-xl"></i>
                    </div>
                    <div class="mr-4">
                        <p class="text-sm font-medium text-gray-600">غير مقروء</p>
                        <p id="unreadNotifications" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-yellow-100 rounded-lg">
                        <i class="fas fa-star text-yellow-600 text-xl"></i>
                    </div>
                    <div class="mr-4">
                        <p class="text-sm font-medium text-gray-600">مهم</p>
                        <p id="importantNotifications" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-green-100 rounded-lg">
                        <i class="fas fa-check-circle text-green-600 text-xl"></i>
                    </div>
                    <div class="mr-4">
                        <p class="text-sm font-medium text-gray-600">مقروء</p>
                        <p id="readNotifications" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Notifications List -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <!-- Loading State -->
            <div id="notificationsLoading" class="p-8 text-center">
                <div class="inline-flex items-center">
                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary-600"></div>
                    <span class="mr-3 text-gray-600">جاري تحميل الإشعارات...</span>
                </div>
            </div>

            <!-- Empty State -->
            <div id="notificationsEmpty" class="p-12 text-center hidden">
                <i class="fas fa-bell-slash text-6xl text-gray-300 mb-4"></i>
                <h3 class="text-lg font-medium text-gray-900 mb-2">لا توجد إشعارات</h3>
                <p class="text-gray-500">ستظهر إشعاراتك هنا عند وصولها</p>
            </div>

            <!-- Notifications List -->
            <div id="notificationsList" class="divide-y divide-gray-200">
                <!-- Notifications will be loaded here -->
            </div>

            <!-- Load More Button -->
            <div id="loadMoreContainer" class="p-4 border-t border-gray-200 text-center hidden">
                <button id="loadMoreBtn" class="px-6 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
                    تحميل المزيد
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Notification Item Template -->
<template id="notificationItemTemplate">
    <div class="notification-item p-6 hover:bg-gray-50 transition-colors duration-200 cursor-pointer" data-notification-id="">
        <div class="flex items-start gap-4">
            <!-- Media (avatar/product) -->
            <div class="flex-shrink-0">
                <div class="relative">
                    <!-- Product/Seller image will be injected here -->
                    <img class="notification-media hidden w-14 h-14 rounded-xl object-cover shadow" alt="media">
                    <div class="w-12 h-12 rounded-full flex items-center justify-center text-white notification-fallback hidden">
                        <i class="notification-icon text-lg"></i>
                    </div>
                    <img class="notification-avatar hidden absolute -bottom-2 -right-2 w-8 h-8 rounded-full ring-2 ring-white object-cover" alt="avatar">
                </div>
            </div>

            <!-- Content -->
            <div class="flex-1 min-w-0">
                <div class="flex items-center justify-between mb-2">
                    <h3 class="notification-title text-base sm:text-lg font-semibold text-gray-900"></h3>
                    <div class="flex items-center gap-3">
                        <span class="notification-time text-xs sm:text-sm text-gray-500"></span>
                        <button class="notification-delete-btn text-gray-400 hover:text-red-500 p-1">
                            <i class="fas fa-trash text-sm"></i>
                        </button>
                    </div>
                </div>

                <p class="notification-message text-gray-600 mb-3"></p>

                <!-- Metadata / Extra info -->
                <div class="notification-metadata text-sm text-gray-500 mb-3 hidden"></div>

                <!-- Actions -->
                <div class="notification-actions flex items-center gap-3">
                    <button class="notification-action-btn px-4 py-2 bg-primary-600 text-white text-sm rounded-lg hover:bg-primary-700 transition-colors hidden">
                        <span class="action-text"></span>
                    </button>
                    <button class="notification-follow-btn px-4 py-2 bg-emerald-600 text-white text-sm rounded-lg hover:bg-emerald-700 transition-colors hidden">
                        متابعة
                    </button>
                    <button class="notification-mark-read-btn text-sm text-gray-500 hover:text-gray-700">
                        تعيين كمقروء
                    </button>
                </div>
            </div>
        </div>
    </div>
    </template>

<style>
/* Notification Styles */
.notification-item.unread {
    background-color: #f8fafc;
    border-left: 4px solid #3b82f6;
}

.notification-item.important {
    background-color: #fef2f2;
    border-left: 4px solid #ef4444;
}

.notification-item.read {
    opacity: 0.7;
}

.notification-item.read .unread-dot {
    display: none;
}

/* Notification type colors */
.notification-icon.message { background-color: #3b82f6; }
.notification-icon.follow { background-color: #10b981; }
.notification-icon.product { background-color: #06b6d4; }
.notification-icon.order { background-color: #f59e0b; }
.notification-icon.review { background-color: #10b981; }
.notification-icon.system { background-color: #6b7280; }
.notification-icon.security { background-color: #ef4444; }
.notification-icon.promotion { background-color: #10b981; }

/* Animation for new notifications */
@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.notification-item.new {
    animation: slideInRight 0.3s ease-out;
}
</style>

<script>
// Notifications Page JavaScript
let notifications = [];
let currentPage = 1;
let hasMore = true;
let isLoading = false;

// Load notifications
async function loadNotifications(reset = false) {
    if (isLoading) return;
    
    isLoading = true;
    
    if (reset) {
        currentPage = 1;
        hasMore = true;
        notifications = [];
    }
    
    const typeFilter = document.getElementById('typeFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    
    let url = `/web/notifications?limit=20&offset=${(currentPage - 1) * 20}`;
    
    if (typeFilter) {
        url += `&type=${typeFilter}`;
    }
    
    try {
        showLoading();
        
        const response = await fetch(url);
        const data = await response.json();
        
        if (reset) {
            notifications = data.notifications || [];
        } else {
            notifications = [...notifications, ...(data.notifications || [])];
        }
        
        hasMore = data.notifications && data.notifications.length === 20;
        
        updateStats();
        renderNotifications();
        
    } catch (error) {
        console.error('Error loading notifications:', error);
        showError();
    } finally {
        isLoading = false;
        hideLoading();
    }
}

// Render notifications
function renderNotifications() {
    const container = document.getElementById('notificationsList');
    const empty = document.getElementById('notificationsEmpty');
    const loadMore = document.getElementById('loadMoreContainer');
    
    if (notifications.length === 0) {
        empty.classList.remove('hidden');
        loadMore.classList.add('hidden');
        return;
    }
    
    empty.classList.add('hidden');
    
    // Clear existing notifications if reset
    if (currentPage === 1) {
        container.innerHTML = '';
    }
    
    // Filter notifications based on status
    const statusFilter = document.getElementById('statusFilter').value;
    let filteredNotifications = notifications;
    
    if (statusFilter === 'unread') {
        filteredNotifications = notifications.filter(n => !n.isRead);
    } else if (statusFilter === 'read') {
        filteredNotifications = notifications.filter(n => n.isRead);
    } else if (statusFilter === 'important') {
        filteredNotifications = notifications.filter(n => n.isImportant);
    }
    
    // Render notifications
    filteredNotifications.forEach(notification => {
        const item = createNotificationItem(notification);
        container.appendChild(item);
    });
    
    // Show/hide load more button
    if (hasMore && !statusFilter) {
        loadMore.classList.remove('hidden');
    } else {
        loadMore.classList.add('hidden');
    }
}

// Create notification item
function createNotificationItem(notification) {
    const template = document.getElementById('notificationItemTemplate');
    const item = template.content.cloneNode(true);
    
    const itemElement = item.querySelector('.notification-item');
    const icon = item.querySelector('.notification-icon');
    const title = item.querySelector('.notification-title');
    const message = item.querySelector('.notification-message');
    const time = item.querySelector('.notification-time');
    const actionBtn = item.querySelector('.notification-action-btn');
    const actionText = item.querySelector('.action-text');
    const followBtn = item.querySelector('.notification-follow-btn');
    const mediaImg = item.querySelector('.notification-media');
    const avatarImg = item.querySelector('.notification-avatar');
    const fallbackIcon = item.querySelector('.notification-fallback');
    const metadataBox = item.querySelector('.notification-metadata');
    const markReadBtn = item.querySelector('.notification-mark-read-btn');
    const deleteBtn = item.querySelector('.notification-delete-btn');
    
    // Set notification data
    itemElement.setAttribute('data-notification-id', notification.id);
    itemElement.onclick = () => handleNotificationClick(notification);
    
    // Set content
    icon.className = `notification-icon ${notification.icon || 'fas fa-bell'} ${notification.type}`;
    title.textContent = notification.title;
    message.textContent = notification.message;
    time.textContent = formatNotificationTime(notification.createdAt);
    
    // Media rendering based on type/metadata
    const md = notification.metadata || {};
    if (notification.type === 'product' && md.product_id) {
        const productImgUrl = `/api/products/image/${md.product_id}/1`;
        mediaImg.src = productImgUrl;
        mediaImg.classList.remove('hidden');
        if (md.seller_id) {
            avatarImg.src = `/web/profile/image/${md.seller_id}/avatar`;
            avatarImg.classList.remove('hidden');
        }
        // Rich metadata
        metadataBox.classList.remove('hidden');
        metadataBox.innerHTML = `
            <div class="flex items-center gap-3">
                <a href="/products/${md.product_id}" class="text-primary-600 hover:text-primary-700 underline">فتح صفحة المنتج</a>
                ${md.seller_name ? `<span class="text-gray-400">•</span><span>البائع: ${md.seller_name}</span>` : ''}
            </div>
        `;
    } else if (notification.type === 'follow' && md.follower_id) {
        avatarImg.src = `/web/profile/image/${md.follower_id}/avatar`;
        avatarImg.classList.remove('hidden');
        fallbackIcon.classList.add('hidden');
        metadataBox.classList.remove('hidden');
        metadataBox.innerHTML = `
            <div class="flex items-center gap-3">
                ${md.follower_name ? `<span>الاسم: ${md.follower_name}</span>` : ''}
                <a href="/profile/${md.follower_id}" class="text-primary-600 hover:text-primary-700 underline">عرض الملف</a>
            </div>
        `;
        // Show follow-back button
        followBtn.classList.remove('hidden');
        followBtn.onclick = async (e) => {
            e.stopPropagation();
            try {
                const res = await fetch(`/web/follow/${md.follower_id}`, { method: 'POST' });
                if (res.ok) {
                    followBtn.textContent = 'تمت المتابعة';
                    followBtn.disabled = true;
                }
            } catch (err) {}
        };
    } else {
        // Fallback colored icon bubble
        fallbackIcon.classList.remove('hidden');
    }

    // Set action button (if provided)
    if (notification.actionUrl && notification.actionText) {
        actionBtn.classList.remove('hidden');
        actionText.textContent = notification.actionText;
        actionBtn.onclick = (e) => {
            e.stopPropagation();
            window.location.href = notification.actionUrl;
        };
    }
    
    // Set mark as read button
    if (!notification.isRead) {
        markReadBtn.onclick = (e) => {
            e.stopPropagation();
            markNotificationAsRead(notification.id);
        };
    } else {
        markReadBtn.style.display = 'none';
    }
    
    // Set delete button
    deleteBtn.onclick = (e) => {
        e.stopPropagation();
        deleteNotification(notification.id);
    };
    
    // Set status classes
    if (!notification.isRead) {
        itemElement.classList.add('unread');
    } else {
        itemElement.classList.add('read');
    }
    
    if (notification.isImportant) {
        itemElement.classList.add('important');
    }
    
    return item;
}

// Handle notification click
function handleNotificationClick(notification) {
    // Mark as read
    markNotificationAsRead(notification.id);
    
    // Navigate to action URL if available
    if (notification.actionUrl) {
        window.location.href = notification.actionUrl;
    }
}

// Mark notification as read
async function markNotificationAsRead(notificationId) {
    try {
        await fetch(`/web/notifications/${notificationId}/read`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        // Update local state
        const notification = notifications.find(n => n.id === notificationId);
        if (notification) {
            notification.isRead = true;
            notification.readAt = new Date().toISOString();
        }
        
        updateStats();
        renderNotifications();
        
    } catch (error) {
        console.error('Error marking notification as read:', error);
    }
}

// Delete notification
async function deleteNotification(notificationId) {
    if (!confirm('هل أنت متأكد من حذف هذا الإشعار؟')) {
        return;
    }
    
    try {
        await fetch(`/web/notifications/${notificationId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        // Remove from local state
        notifications = notifications.filter(n => n.id !== notificationId);
        
        updateStats();
        renderNotifications();
        
    } catch (error) {
        console.error('Error deleting notification:', error);
    }
}

// Mark all notifications as read
async function markAllNotificationsAsRead() {
    try {
        await fetch('/web/notifications/mark-all-read', {
            method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            }
        });
        
        // Update local state
        notifications.forEach(notification => {
            notification.isRead = true;
            notification.readAt = new Date().toISOString();
        });
        
        updateStats();
        renderNotifications();
        
    } catch (error) {
        console.error('Error marking all notifications as read:', error);
    }
}

// Update stats
function updateStats() {
    const total = notifications.length;
    const unread = notifications.filter(n => !n.isRead).length;
    const important = notifications.filter(n => n.isImportant && !n.isRead).length;
    const read = notifications.filter(n => n.isRead).length;
    
    document.getElementById('totalNotifications').textContent = total;
    document.getElementById('unreadNotifications').textContent = unread;
    document.getElementById('importantNotifications').textContent = important;
    document.getElementById('readNotifications').textContent = read;
}

// Format notification time
function formatNotificationTime(createdAt) {
    const now = new Date();
    const notificationTime = new Date(createdAt);
    const diffInMinutes = Math.floor((now - notificationTime) / (1000 * 60));
    
    if (diffInMinutes < 1) {
        return 'الآن';
    } else if (diffInMinutes < 60) {
        return `منذ ${diffInMinutes} دقيقة`;
    } else if (diffInMinutes < 1440) {
        const hours = Math.floor(diffInMinutes / 60);
        return `منذ ${hours} ساعة`;
    } else {
        const days = Math.floor(diffInMinutes / 1440);
        return `منذ ${days} يوم`;
    }
}

// Show loading state
function showLoading() {
    document.getElementById('notificationsLoading').classList.remove('hidden');
    document.getElementById('notificationsList').innerHTML = '';
}

// Hide loading state
function hideLoading() {
    document.getElementById('notificationsLoading').classList.add('hidden');
}

// Show error state
function showError() {
    const container = document.getElementById('notificationsList');
    container.innerHTML = `
        <div class="p-8 text-center text-red-600">
            <i class="fas fa-exclamation-triangle text-4xl mb-4"></i>
            <h3 class="text-lg font-medium mb-2">حدث خطأ في تحميل الإشعارات</h3>
            <p class="text-gray-500">الرجاء المحاولة مرة أخرى</p>
        </div>
    `;
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    loadNotifications(true);
    
    // Mark all as read button
    document.getElementById('markAllReadBtn').onclick = markAllNotificationsAsRead;
    
    // Refresh button
    document.getElementById('refreshBtn').onclick = () => loadNotifications(true);
    
    // Load more button
    document.getElementById('loadMoreBtn').onclick = () => {
        currentPage++;
        loadNotifications();
    };
    
    // Filter changes
    document.getElementById('typeFilter').onchange = () => loadNotifications(true);
    document.getElementById('statusFilter').onchange = () => renderNotifications();
});
</script>
{% endblock %}