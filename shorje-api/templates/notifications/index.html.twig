{% extends 'base.html.twig' %}

{% block title %}الإشعارات - شورجي{% endblock %}

{% block body %}
<div class="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4 space-x-reverse">
                    <button onclick="history.back()" class="p-2 text-gray-600 hover:text-gray-900 rounded-lg hover:bg-gray-100">
                        <i class="fas fa-arrow-right"></i>
                    </button>
                        <div>
                        <h1 class="text-2xl font-bold text-gray-900">الإشعارات</h1>
                        <p class="text-sm text-gray-600">إدارة جميع إشعاراتك</p>
                    </div>
                </div>
                <div class="flex items-center space-x-3 space-x-reverse">
                    <button id="markAllReadBtn" class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
                        تعيين الكل كمقروء
                    </button>
                    <button id="refreshBtn" class="p-2 text-gray-600 hover:text-gray-900 rounded-lg hover:bg-gray-100">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex items-center space-x-4 space-x-reverse">
                <div class="flex items-center space-x-2 space-x-reverse">
                    <label class="text-sm font-medium text-gray-700">النوع:</label>
                    <select id="typeFilter" class="border border-gray-300 rounded-lg px-3 py-1 text-sm">
                        <option value="">الكل</option>
                        <option value="message">الرسائل</option>
                        <option value="follow">المتابعة</option>
                        <option value="product">المنتجات</option>
                        <option value="order">الطلبات</option>
                        <option value="review">التقييمات</option>
                        <option value="system">النظام</option>
                        <option value="security">الأمان</option>
                        <option value="promotion">العروض</option>
                    </select>
                </div>
                <div class="flex items-center space-x-2 space-x-reverse">
                    <label class="text-sm font-medium text-gray-700">الحالة:</label>
                    <select id="statusFilter" class="border border-gray-300 rounded-lg px-3 py-1 text-sm">
                        <option value="">الكل</option>
                        <option value="unread">غير مقروء</option>
                        <option value="read">مقروء</option>
                        <option value="important">مهم</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-primary-100 rounded-lg">
                        <i class="fas fa-bell text-primary-600 text-xl"></i>
                    </div>
                    <div class="mr-4">
                        <p class="text-sm font-medium text-gray-600">إجمالي الإشعارات</p>
                        <p id="totalNotifications" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
        </div>

            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-red-100 rounded-lg">
                        <i class="fas fa-exclamation-circle text-red-600 text-xl"></i>
                    </div>
                    <div class="mr-4">
                        <p class="text-sm font-medium text-gray-600">غير مقروء</p>
                        <p id="unreadNotifications" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-yellow-100 rounded-lg">
                        <i class="fas fa-star text-yellow-600 text-xl"></i>
                    </div>
                    <div class="mr-4">
                        <p class="text-sm font-medium text-gray-600">مهم</p>
                        <p id="importantNotifications" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-green-100 rounded-lg">
                        <i class="fas fa-check-circle text-green-600 text-xl"></i>
                    </div>
                    <div class="mr-4">
                        <p class="text-sm font-medium text-gray-600">مقروء</p>
                        <p id="readNotifications" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Notifications List -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <!-- Loading State -->
            <div id="notificationsLoading" class="p-8 text-center">
                <div class="inline-flex items-center">
                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary-600"></div>
                    <span class="mr-3 text-gray-600">جاري تحميل الإشعارات...</span>
                </div>
            </div>

            <!-- Empty State -->
            <div id="notificationsEmpty" class="p-12 text-center hidden">
                <i class="fas fa-bell-slash text-6xl text-gray-300 mb-4"></i>
                <h3 class="text-lg font-medium text-gray-900 mb-2">لا توجد إشعارات</h3>
                <p class="text-gray-500">ستظهر إشعاراتك هنا عند وصولها</p>
            </div>

            <!-- Notifications List -->
            <div id="notificationsList" class="divide-y divide-gray-200">
                <!-- Notifications will be loaded here -->
            </div>

            <!-- Load More Button -->
            <div id="loadMoreContainer" class="p-4 border-t border-gray-200 text-center hidden">
                <button id="loadMoreBtn" class="px-6 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
                    تحميل المزيد
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Notification Item Template -->
<template id="notificationItemTemplate">
    <div class="notification-item p-6 hover:bg-gradient-to-r hover:from-gray-50 hover:to-white transition-all duration-300 cursor-pointer group rounded-lg mb-3 border border-transparent hover:border-gray-200 hover:shadow-md" data-notification-id="">
        <div class="flex items-start space-x-4 space-x-reverse">
            <!-- Avatar/Icon -->
            <div class="flex-shrink-0 relative">
                <div class="notification-avatar w-16 h-16 rounded-full overflow-hidden bg-gradient-to-br from-primary-500 to-primary-600 flex items-center justify-center text-white shadow-lg group-hover:shadow-xl transition-all duration-300">
                    <img class="notification-user-image w-full h-full object-cover hidden" src="" alt="">
                    <i class="notification-icon text-2xl"></i>
                </div>
                <div class="notification-status absolute -bottom-1 -right-1">
                    <span class="unread-dot w-4 h-4 bg-red-500 rounded-full border-2 border-white shadow-md"></span>
                </div>
            </div>
            
            <!-- Content -->
            <div class="flex-1 min-w-0">
                <div class="flex items-start justify-between mb-2">
                    <div class="flex-1">
                        <h3 class="notification-title text-lg font-bold text-gray-900 mb-1"></h3>
                        <p class="notification-message text-gray-600 leading-relaxed"></p>
                    </div>
                    <div class="flex items-center space-x-3 space-x-reverse mr-4">
                        <span class="notification-time text-sm text-gray-400 whitespace-nowrap"></span>
                        <button class="notification-delete-btn text-gray-400 hover:text-red-500 p-2 hover:bg-red-50 rounded-lg transition-all duration-200">
                            <i class="fas fa-trash text-sm"></i>
                        </button>
                    </div>
                </div>
                
                <!-- User Info for Follow Notifications -->
                <div class="notification-user-info hidden mt-4 p-4 bg-gradient-to-r from-blue-50 to-transparent rounded-xl border border-blue-100">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3 space-x-reverse">
                            <img class="user-info-avatar w-12 h-12 rounded-full object-cover border-2 border-white shadow-md" src="" alt="">
                            <div>
                                <p class="user-info-name text-base font-bold text-gray-900"></p>
                                <p class="user-info-email text-sm text-gray-500"></p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2 space-x-reverse">
                            <button class="follow-back-btn px-5 py-2 bg-primary-600 hover:bg-primary-700 text-white text-sm font-semibold rounded-full transition-all duration-200 hover:shadow-lg transform hover:scale-105">
                                <i class="fas fa-user-plus ml-1"></i>
                                متابعة
                            </button>
                            <a href="#" class="view-profile-btn px-4 py-2 border-2 border-gray-200 hover:border-primary-600 text-gray-700 hover:text-primary-600 text-sm font-medium rounded-full transition-all duration-200">
                                <i class="fas fa-user ml-1"></i>
                                الملف الشخصي
                            </a>
                        </div>
                    </div>
                </div>
                
                <!-- Actions -->
                <div class="notification-actions mt-4 flex items-center space-x-3 space-x-reverse">
                    <button class="notification-action-btn px-5 py-2 bg-primary-600 text-white text-sm font-semibold rounded-lg hover:bg-primary-700 transition-all duration-200 hover:shadow-md hidden">
                        <i class="action-icon fas fa-arrow-left ml-1"></i>
                        <span class="action-text"></span>
                    </button>
                    <button class="notification-mark-read-btn px-4 py-2 text-sm text-gray-600 hover:text-primary-600 font-medium hover:bg-gray-100 rounded-lg transition-all duration-200">
                        <i class="fas fa-check ml-1"></i>
                        تعيين كمقروء
                    </button>
                </div>
            </div>
        </div>
    </div>
</template>

<style>
/* Notification Styles */
.notification-item.unread {
    background: linear-gradient(to left, #f0f9ff 0%, #ffffff 100%);
    border-right: 4px solid #3b82f6;
}

.notification-item.important {
    background: linear-gradient(to left, #fef2f2 0%, #ffffff 100%);
    border-right: 4px solid #ef4444;
}

.notification-item.read {
    opacity: 0.75;
}

.notification-item.read .unread-dot {
    display: none;
}

/* Notification type colors with gradients */
.notification-avatar.message { 
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
}
.notification-avatar.follow { 
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
}
.notification-avatar.product { 
    background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
}
.notification-avatar.order { 
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
}
.notification-avatar.review { 
    background: linear-gradient(135deg, #eab308 0%, #ca8a04 100%);
}
.notification-avatar.system { 
    background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
}
.notification-avatar.security { 
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
}
.notification-avatar.promotion { 
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
}
.notification-avatar.new_product { 
    background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
}

/* Hover effects */
.notification-item:hover .notification-avatar {
    transform: scale(1.05) rotate(3deg);
}

/* Animation for new notifications */
@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes pulse {
    0%, 100% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.15);
    }
}

.notification-item.new {
    animation: slideInRight 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.unread-dot {
    animation: pulse 2s infinite;
}

/* Stats cards */
.bg-primary-100 {
    background: linear-gradient(135deg, #dbeafe 0%, #e0f2fe 100%);
}
.bg-red-100 {
    background: linear-gradient(135deg, #fee2e2 0%, #fef2f2 100%);
}
.bg-yellow-100 {
    background: linear-gradient(135deg, #fef3c7 0%, #fef9e3 100%);
}
.bg-green-100 {
    background: linear-gradient(135deg, #d1fae5 0%, #ecfdf5 100%);
}
</style>

<script>
// Notifications Page JavaScript
let notifications = [];
let currentPage = 1;
let hasMore = true;
let isLoading = false;

// Load notifications
async function loadNotifications(reset = false) {
    if (isLoading) return;
    
    isLoading = true;
    
    if (reset) {
        currentPage = 1;
        hasMore = true;
        notifications = [];
    }
    
    const typeFilter = document.getElementById('typeFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    
    let url = `/app/notifications?limit=20&offset=${(currentPage - 1) * 20}`;
    
    if (typeFilter) {
        url += `&type=${typeFilter}`;
    }
    
    try {
        showLoading();
        
        const response = await fetch(url, {
            credentials: 'same-origin',
            headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (reset) {
            notifications = data.notifications || [];
        } else {
            notifications = [...notifications, ...(data.notifications || [])];
        }
        
        hasMore = data.notifications && data.notifications.length === 20;
        
        updateStats();
        renderNotifications();
        
    } catch (error) {
        console.error('Error loading notifications:', error);
        showError();
    } finally {
        isLoading = false;
        hideLoading();
    }
}

// Render notifications
function renderNotifications() {
    const container = document.getElementById('notificationsList');
    const empty = document.getElementById('notificationsEmpty');
    const loadMore = document.getElementById('loadMoreContainer');
    
    if (notifications.length === 0) {
        empty.classList.remove('hidden');
        loadMore.classList.add('hidden');
        return;
    }
    
    empty.classList.add('hidden');
    
    // Clear existing notifications if reset
    if (currentPage === 1) {
        container.innerHTML = '';
    }
    
    // Filter notifications based on status
    const statusFilter = document.getElementById('statusFilter').value;
    let filteredNotifications = notifications;
    
    if (statusFilter === 'unread') {
        filteredNotifications = notifications.filter(n => !n.isRead);
    } else if (statusFilter === 'read') {
        filteredNotifications = notifications.filter(n => n.isRead);
    } else if (statusFilter === 'important') {
        filteredNotifications = notifications.filter(n => n.isImportant);
    }
    
    // Render notifications
    filteredNotifications.forEach(notification => {
        const item = createNotificationItem(notification);
        container.appendChild(item);
    });
    
    // Show/hide load more button
    if (hasMore && !statusFilter) {
        loadMore.classList.remove('hidden');
    } else {
        loadMore.classList.add('hidden');
    }
}

// Create notification item
function createNotificationItem(notification) {
    const template = document.getElementById('notificationItemTemplate');
    const item = template.content.cloneNode(true);
    
    const itemElement = item.querySelector('.notification-item');
    const avatar = item.querySelector('.notification-avatar');
    const userImage = item.querySelector('.notification-user-image');
    const icon = item.querySelector('.notification-icon');
    const title = item.querySelector('.notification-title');
    const message = item.querySelector('.notification-message');
    const time = item.querySelector('.notification-time');
    const actionBtn = item.querySelector('.notification-action-btn');
    const actionText = item.querySelector('.action-text');
    const actionIcon = item.querySelector('.action-icon');
    const markReadBtn = item.querySelector('.notification-mark-read-btn');
    const deleteBtn = item.querySelector('.notification-delete-btn');
    const userInfo = item.querySelector('.notification-user-info');
    const userInfoAvatar = item.querySelector('.user-info-avatar');
    const userInfoName = item.querySelector('.user-info-name');
    const userInfoEmail = item.querySelector('.user-info-email');
    const followBackBtn = item.querySelector('.follow-back-btn');
    const viewProfileBtn = item.querySelector('.view-profile-btn');
    
    // Set notification data
    itemElement.setAttribute('data-notification-id', notification.id);
    itemElement.onclick = () => handleNotificationClick(notification);
    
    // Set avatar/icon
    avatar.classList.add(notification.type);
    
    // Check if we have user image in metadata
    if (notification.metadata && notification.metadata.sender_image) {
        userImage.src = notification.metadata.sender_image;
        userImage.classList.remove('hidden');
        icon.classList.add('hidden');
    } else if (notification.metadata && notification.metadata.follower_image) {
        userImage.src = notification.metadata.follower_image;
        userImage.classList.remove('hidden');
        icon.classList.add('hidden');
    } else if (notification.metadata && notification.metadata.seller_image) {
        userImage.src = notification.metadata.seller_image;
        userImage.classList.remove('hidden');
        icon.classList.add('hidden');
    } else {
        icon.className = `notification-icon ${notification.icon || 'fas fa-bell'}`;
    }
    
    // Set content
    title.textContent = notification.title;
    message.textContent = notification.message;
    time.textContent = formatNotificationTime(notification.createdAt);
    
    // Handle follow notifications - show user info and follow back button
    if (notification.type === 'follow' && notification.metadata) {
        userInfo.classList.remove('hidden');
        
        // Set user info
        const followerName = notification.metadata.follower_name || 'مستخدم';
        const followerId = notification.metadata.follower_id;
        const followerImage = notification.metadata.follower_image || '/images/default-avatar.png';
        
        userInfoAvatar.src = followerImage;
        userInfoName.textContent = followerName;
        userInfoEmail.textContent = `@user${followerId}`;
        
        // Follow back button
        followBackBtn.onclick = (e) => {
            e.stopPropagation();
            followUser(followerId, followBackBtn);
        };
        
        // View profile button
        viewProfileBtn.href = `/profile?user=${followerId}`;
        viewProfileBtn.onclick = (e) => {
            e.stopPropagation();
        };
    }
    
    // Set action button
    if (notification.actionUrl && notification.actionText) {
        actionBtn.classList.remove('hidden');
        actionText.textContent = notification.actionText;
        
        // Set appropriate icon based on type
        if (notification.type === 'message') {
            actionIcon.className = 'action-icon fas fa-envelope ml-1';
        } else if (notification.type === 'product') {
            actionIcon.className = 'action-icon fas fa-box ml-1';
        } else if (notification.type === 'order') {
            actionIcon.className = 'action-icon fas fa-shopping-cart ml-1';
        } else {
            actionIcon.className = 'action-icon fas fa-arrow-left ml-1';
        }
        
        actionBtn.onclick = (e) => {
            e.stopPropagation();
            window.location.href = notification.actionUrl;
        };
    }
    
    // Set mark as read button
    if (!notification.isRead) {
        markReadBtn.onclick = (e) => {
            e.stopPropagation();
            markNotificationAsRead(notification.id);
        };
    } else {
        markReadBtn.style.display = 'none';
    }
    
    // Set delete button
    deleteBtn.onclick = (e) => {
        e.stopPropagation();
        deleteNotification(notification.id);
    };
    
    // Set status classes
    if (!notification.isRead) {
        itemElement.classList.add('unread');
    } else {
        itemElement.classList.add('read');
    }
    
    if (notification.isImportant) {
        itemElement.classList.add('important');
    }
    
    return item;
}

// Follow user function
async function followUser(userId, button) {
    try {
        const response = await fetch(`/follow/${userId}`, {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        if (response.ok) {
            button.innerHTML = '<i class="fas fa-check ml-1"></i> تمت المتابعة';
            button.classList.remove('bg-primary-600', 'hover:bg-primary-700');
            button.classList.add('bg-green-500', 'cursor-default');
            button.disabled = true;
        }
    } catch (error) {
        console.error('Error following user:', error);
        button.innerHTML = '<i class="fas fa-times ml-1"></i> خطأ';
        button.classList.add('bg-red-500');
    }
}

// Handle notification click
function handleNotificationClick(notification) {
    // Mark as read
    markNotificationAsRead(notification.id);
    
    // Navigate to action URL if available
    if (notification.actionUrl) {
        window.location.href = notification.actionUrl;
    }
}

// Mark notification as read
async function markNotificationAsRead(notificationId) {
    try {
        await fetch(`/app/notifications/${notificationId}/read`, {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        // Update local state
        const notification = notifications.find(n => n.id === notificationId);
        if (notification) {
            notification.isRead = true;
            notification.readAt = new Date().toISOString();
        }
        
        updateStats();
        renderNotifications();
        
    } catch (error) {
        console.error('Error marking notification as read:', error);
    }
}

// Delete notification
async function deleteNotification(notificationId) {
    if (!confirm('هل أنت متأكد من حذف هذا الإشعار؟')) {
        return;
    }
    
    try {
        await fetch(`/app/notifications/${notificationId}`, {
            method: 'DELETE',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        // Remove from local state
        notifications = notifications.filter(n => n.id !== notificationId);
        
        updateStats();
        renderNotifications();
        
    } catch (error) {
        console.error('Error deleting notification:', error);
    }
}

// Mark all notifications as read
async function markAllNotificationsAsRead() {
    try {
        await fetch('/app/notifications/mark-all-read', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        // Update local state
        notifications.forEach(notification => {
            notification.isRead = true;
            notification.readAt = new Date().toISOString();
        });
        
        updateStats();
        renderNotifications();
        
    } catch (error) {
        console.error('Error marking all notifications as read:', error);
    }
}

// Update stats
function updateStats() {
    const total = notifications.length;
    const unread = notifications.filter(n => !n.isRead).length;
    const important = notifications.filter(n => n.isImportant && !n.isRead).length;
    const read = notifications.filter(n => n.isRead).length;
    
    document.getElementById('totalNotifications').textContent = total;
    document.getElementById('unreadNotifications').textContent = unread;
    document.getElementById('importantNotifications').textContent = important;
    document.getElementById('readNotifications').textContent = read;
}

// Format notification time
function formatNotificationTime(createdAt) {
    const now = new Date();
    const notificationTime = new Date(createdAt);
    const diffInMinutes = Math.floor((now - notificationTime) / (1000 * 60));
    
    if (diffInMinutes < 1) {
        return 'الآن';
    } else if (diffInMinutes < 60) {
        return `منذ ${diffInMinutes} دقيقة`;
    } else if (diffInMinutes < 1440) {
        const hours = Math.floor(diffInMinutes / 60);
        return `منذ ${hours} ساعة`;
    } else {
        const days = Math.floor(diffInMinutes / 1440);
        return `منذ ${days} يوم`;
    }
}

// Show loading state
function showLoading() {
    document.getElementById('notificationsLoading').classList.remove('hidden');
    document.getElementById('notificationsList').innerHTML = '';
}

// Hide loading state
function hideLoading() {
    document.getElementById('notificationsLoading').classList.add('hidden');
}

// Show error state
function showError() {
    const container = document.getElementById('notificationsList');
    container.innerHTML = `
        <div class="p-8 text-center text-red-600">
            <i class="fas fa-exclamation-triangle text-4xl mb-4"></i>
            <h3 class="text-lg font-medium mb-2">حدث خطأ في تحميل الإشعارات</h3>
            <p class="text-gray-500">الرجاء المحاولة مرة أخرى</p>
        </div>
    `;
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    loadNotifications(true);
    
    // Mark all as read button
    document.getElementById('markAllReadBtn').onclick = markAllNotificationsAsRead;
    
    // Refresh button
    document.getElementById('refreshBtn').onclick = () => loadNotifications(true);
    
    // Load more button
    document.getElementById('loadMoreBtn').onclick = () => {
        currentPage++;
        loadNotifications();
    };
    
    // Filter changes
    document.getElementById('typeFilter').onchange = () => loadNotifications(true);
    document.getElementById('statusFilter').onchange = () => renderNotifications();
});
</script>
{% endblock %}