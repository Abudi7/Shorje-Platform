{% extends 'base.html.twig' %}

{% block title %}الرسائل - شورجي{% endblock %}

{% block body %}
<style>
    /* Custom animations and styles */
    .glass {
        background: rgba(255, 255, 255, 0.25);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.18);
    }
    
    .glass-dark {
        background: rgba(15, 23, 42, 0.25);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .conversation-item {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .conversation-item:hover {
        transform: translateX(4px);
    }
    
    .conversation-item.active {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.1));
        border-right: 4px solid #3b82f6;
    }
    
    .message-bubble {
        animation: messageSlide 0.3s ease-out;
    }
    
    @keyframes messageSlide {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .gradient-text {
        background: linear-gradient(135deg, #10b981, #3b82f6, #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .floating-action {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        z-index: 50;
    }
    
    .custom-scrollbar::-webkit-scrollbar {
        width: 6px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-track {
        background: rgba(0, 0, 0, 0.1);
        border-radius: 3px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        border-radius: 3px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #2563eb, #7c3aed);
    }
    
    .pulse-animation {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    
    @keyframes pulse {
        0%, 100% {
            opacity: 1;
        }
        50% {
            opacity: .5;
        }
    }
</style>

<div class="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-green-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
    <!-- Modern Header -->
    <nav class="glass sticky top-0 z-50 border-b border-white/20 dark:border-slate-700/30">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-20">
                <!-- Logo Section -->
                <div class="flex items-center">
                    <div class="flex items-center space-x-4">
                        <div class="h-12 w-12 bg-gradient-to-br from-emerald-500 via-blue-500 to-purple-500 rounded-2xl flex items-center justify-center shadow-lg relative overflow-hidden">
                            <div class="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent"></div>
                            <i class="fas fa-comments text-white text-xl relative z-10"></i>
                        </div>
                        <div>
                            <h1 class="text-3xl font-bold gradient-text">الرسائل</h1>
                            <p class="text-sm text-gray-600 dark:text-gray-400">تواصل مع البائعين والمشترين</p>
                        </div>
                    </div>
                </div>

                <!-- Navigation Actions -->
                <div class="flex items-center space-x-4">
                    <a href="/home" class="flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-emerald-600 dark:hover:text-emerald-400 font-medium transition-colors px-4 py-2 rounded-xl hover:bg-white/50 dark:hover:bg-slate-800/50">
                        <i class="fas fa-home"></i>
                        <span>الرئيسية</span>
                    </a>
                    <a href="/profile" class="flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-emerald-600 dark:hover:text-emerald-400 font-medium transition-colors px-4 py-2 rounded-xl hover:bg-white/50 dark:hover:bg-slate-800/50">
                        <i class="fas fa-user"></i>
                        <span>الملف الشخصي</span>
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Product Information (if coming from product page) -->
    {% if product and seller %}
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div class="bg-gradient-to-r from-emerald-500 to-blue-500 rounded-2xl shadow-xl p-6 text-white">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="h-16 w-16 bg-white/20 rounded-xl flex items-center justify-center">
                        <i class="fas fa-shopping-cart text-2xl"></i>
                    </div>
                    <div>
                        <h3 class="text-xl font-bold">استفسار عن المنتج</h3>
                        <p class="text-emerald-100">تتواصل مع {{ seller.firstName }} {{ seller.lastName }} بخصوص هذا المنتج</p>
                    </div>
                </div>
                <div class="text-right">
                    <p class="text-sm text-emerald-100">المنتج: {{ product.productName }}</p>
                    <p class="text-lg font-bold">{{ product.productPrice }}</p>
                </div>
            </div>
        </div>
        
        <!-- Detailed Product Card -->
        <div class="mt-4 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 dark:border-slate-700/20 p-6">
            <div class="flex items-start space-x-4">
                <div class="flex-shrink-0">
                    {% if product.productImage %}
                        <img src="{{ product.productImage }}" alt="{{ product.productName }}" class="w-20 h-20 object-cover rounded-xl shadow-lg">
                    {% else %}
                        <div class="w-20 h-20 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-xl flex items-center justify-center">
                            <i class="fas fa-image text-white text-2xl"></i>
                        </div>
                    {% endif %}
                </div>
                <div class="flex-1">
                    <h4 class="text-lg font-bold text-gray-900 dark:text-white mb-2">{{ product.productName }}</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div class="space-y-2">
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-tag text-emerald-500"></i>
                                <span class="text-gray-600 dark:text-gray-400">الفئة:</span>
                                <span class="font-medium text-gray-900 dark:text-white">{{ product.productCategory }}</span>
                            </div>
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-map-marker-alt text-emerald-500"></i>
                                <span class="text-gray-600 dark:text-gray-400">الموقع:</span>
                                <span class="font-medium text-gray-900 dark:text-white">{{ product.productCity }}</span>
                            </div>
                        </div>
                        <div class="space-y-2">
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-user text-emerald-500"></i>
                                <span class="text-gray-600 dark:text-gray-400">البائع:</span>
                                <span class="font-medium text-gray-900 dark:text-white">{{ product.sellerName or seller.firstName ~ ' ' ~ seller.lastName }}</span>
                            </div>
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-dollar-sign text-emerald-500"></i>
                                <span class="text-gray-600 dark:text-gray-400">السعر:</span>
                                <span class="font-bold text-emerald-600 dark:text-emerald-400 text-lg">{{ product.productPrice }}</span>
                            </div>
                        </div>
                    </div>
                    {% if product.productDescription %}
                    <div class="mt-3">
                        <p class="text-sm text-gray-600 dark:text-gray-400">{{ product.productDescription }}</p>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
    {% endif %}

    <!-- Messages Container -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 dark:border-slate-700/20 overflow-hidden">
            <div class="flex h-[calc(100vh-12rem)]">
                <!-- Conversations Sidebar -->
                <div class="w-80 bg-gradient-to-b from-white/90 to-gray-50/90 dark:from-slate-800/90 dark:to-slate-900/90 backdrop-blur-sm border-l border-gray-200/50 dark:border-slate-600/50 flex flex-col">
                    <!-- Header -->
                    <div class="p-6 border-b border-gray-200/50 dark:border-slate-600/50">
                        <div class="flex items-center justify-between mb-6">
                            <h2 class="text-xl font-bold text-gray-900 dark:text-white">المحادثات</h2>
                            <button onclick="startNewChat()" class="p-3 bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-600 hover:to-blue-600 text-white rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105">
                                <i class="fas fa-plus text-sm"></i>
                            </button>
                        </div>
                        
                        <!-- Search Bar -->
                        <div class="relative">
                            <input type="text" id="searchInput" placeholder="البحث في المحادثات..." 
                                   class="w-full pl-12 pr-4 py-3 bg-gray-100/80 dark:bg-slate-700/80 border-0 rounded-2xl text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:bg-white dark:focus:bg-slate-600 transition-all duration-300 shadow-lg">
                            <i class="fas fa-search absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        </div>
                    </div>

                    <!-- Conversations List -->
                    <div class="flex-1 overflow-y-auto custom-scrollbar p-2" id="conversationsList">
                        {% if conversations|length > 0 %}
                            {% for conversation in conversations %}
                            <div class="conversation-item p-4 mb-2 {% if conversation.unreadCount > 0 %}bg-gradient-to-r from-emerald-50 to-blue-50 dark:from-emerald-900/20 dark:to-blue-900/20 border-l-4 border-emerald-500{% else %}bg-white/60 dark:bg-slate-700/60{% endif %} backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-slate-600/50 hover:bg-white/80 dark:hover:bg-slate-700/80 cursor-pointer transition-all duration-300" 
                                 data-user-id="{{ conversation.otherUserId }}" 
                                 onclick="selectConversation({{ conversation.otherUserId }}, '{{ conversation.otherUserName|e('js') }}')">
                                <div class="flex items-center space-x-4">
                                    <!-- Profile Picture -->
                                    <div class="relative">
                                        <div class="h-14 w-14 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-2xl flex items-center justify-center overflow-hidden shadow-lg">
                                            <img src="/api/user/avatar/{{ conversation.otherUserId }}" 
                                                 alt="{{ conversation.otherUserName }}" 
                                                 class="w-full h-full object-cover"
                                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                            <i class="fas fa-user text-white text-lg" style="display: none;"></i>
                                        </div>
                                        <!-- Online Status -->
                                        <div class="absolute -bottom-1 -right-1 h-4 w-4 bg-emerald-500 border-2 border-white dark:border-slate-800 rounded-full shadow-lg"></div>
                                    </div>
                                    
                                    <!-- Conversation Info -->
                                    <div class="flex-1 min-w-0">
                                        <div class="flex items-center justify-between mb-1">
                                            <div class="flex items-center space-x-2">
                                                <h3 class="text-sm font-bold text-gray-900 dark:text-white truncate">{{ conversation.otherUserName }}</h3>
                                                {% if conversation.unreadCount > 0 %}
                                                <span class="text-xs bg-gradient-to-r from-emerald-500 to-blue-500 text-white px-2 py-1 rounded-full font-bold animate-pulse">جديد</span>
                                                {% endif %}
                                            </div>
                                            <span class="text-xs text-gray-500 dark:text-slate-400 font-medium">{{ conversation.lastMessageSentAt|date('H:i') }}</span>
                                        </div>
                                        <p class="text-sm {% if conversation.unreadCount > 0 %}text-gray-900 dark:text-white font-semibold{% else %}text-gray-600 dark:text-slate-300{% endif %} truncate leading-relaxed">{{ conversation.lastMessageContent }}</p>
                                    </div>
                                    
                                    <!-- Unread Badge -->
                                    {% if conversation.unreadCount > 0 %}
                                    <div class="flex-shrink-0">
                                        <div class="bg-gradient-to-r from-emerald-500 to-blue-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center font-bold shadow-lg animate-pulse">
                                            {{ conversation.unreadCount > 99 ? '99+' : conversation.unreadCount }}
                                        </div>
                                    </div>
                                    {% endif %}
                                </div>
                            </div>
                            {% endfor %}
                        {% else %}
                            <div class="p-8 text-center text-gray-500 dark:text-slate-400">
                                <div class="w-20 h-20 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-lg">
                                    <i class="fas fa-comments text-white text-2xl"></i>
                                </div>
                                <h3 class="text-lg font-semibold mb-2">لا توجد محادثات</h3>
                                <p class="text-sm">ابدأ محادثة جديدة مع البائعين</p>
                                <button onclick="startNewChat()" class="mt-4 bg-gradient-to-r from-emerald-500 to-blue-500 text-white px-6 py-2 rounded-xl font-medium hover:from-emerald-600 hover:to-blue-600 transition-all duration-300 shadow-lg">
                                    <i class="fas fa-plus ml-2"></i>محادثة جديدة
                                </button>
                            </div>
                        {% endif %}
                    </div>
                </div>

                <!-- Main Chat Area -->
                <div class="flex-1 flex flex-col bg-gradient-to-br from-gray-50/50 to-white/50 dark:from-slate-900/50 dark:to-slate-800/50">
                    <!-- Chat Header -->
                    <div id="chatHeader" class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm border-b border-gray-200/50 dark:border-slate-600/50 p-6 hidden">
                        <div class="flex items-center space-x-4">
                            <div class="h-12 w-12 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-2xl flex items-center justify-center overflow-hidden shadow-lg">
                                <img id="chatUserImage" src="" alt="" class="w-full h-full object-cover" style="display: none;">
                                <i class="fas fa-user text-white text-lg" id="chatUserIcon"></i>
                            </div>
                            <div>
                                <h2 id="chatUserName" class="text-xl font-bold text-gray-900 dark:text-white"></h2>
                                <div class="flex items-center space-x-2">
                                    <div class="h-2 w-2 bg-emerald-500 rounded-full animate-pulse"></div>
                                    <p class="text-sm text-emerald-600 dark:text-emerald-400 font-medium">متصل الآن</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Messages Area -->
                    <div id="messagesArea" class="flex-1 overflow-y-auto custom-scrollbar p-6">
                        <div id="noChatSelected" class="flex items-center justify-center h-full text-center">
                            <div>
                                <div class="w-32 h-32 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-3xl flex items-center justify-center mx-auto mb-8 shadow-2xl">
                                    <i class="fas fa-comments text-white text-4xl"></i>
                                </div>
                                <h3 class="text-2xl font-bold text-gray-500 dark:text-slate-400 mb-4">اختر محادثة</h3>
                                <p class="text-gray-400 dark:text-slate-500 text-lg">اختر محادثة من القائمة لبدء المحادثة</p>
                            </div>
                        </div>
                        
                        <div id="messagesContainer" class="space-y-4 hidden">
                            <!-- Messages will be loaded here -->
                        </div>
                    </div>

                    <!-- Message Input -->
                    <div id="messageInput" class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm border-t border-gray-200/50 dark:border-slate-600/50 p-6 hidden">
                        <div class="flex items-center space-x-4">
                            <input type="file" id="imageInput" accept="image/*" class="hidden" onchange="handleImageUpload(event)">
                            <button onclick="document.getElementById('imageInput').click()" class="p-3 text-gray-500 hover:text-gray-700 dark:text-slate-400 dark:hover:text-slate-200 transition-colors bg-gray-100/80 dark:bg-slate-700/80 rounded-2xl hover:bg-gray-200/80 dark:hover:bg-slate-600/80">
                                <i class="fas fa-paperclip text-lg"></i>
                            </button>
                            <div class="flex-1 relative">
                                <input type="text" id="messageText" placeholder="اكتب رسالة..." 
                                       class="w-full px-6 py-4 bg-gray-100/80 dark:bg-slate-700/80 border-0 rounded-2xl text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:bg-white dark:focus:bg-slate-600 transition-all duration-300 shadow-lg">
                            </div>
                            <button class="p-3 text-gray-500 hover:text-gray-700 dark:text-slate-400 dark:hover:text-slate-200 transition-colors bg-gray-100/80 dark:bg-slate-700/80 rounded-2xl hover:bg-gray-200/80 dark:hover:bg-slate-600/80">
                                <i class="fas fa-smile text-lg"></i>
                            </button>
                            <button onclick="sendMessage()" class="p-3 bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-600 hover:to-blue-600 text-white rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105">
                                <i class="fas fa-paper-plane text-lg"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Floating Action Button -->
    <div class="floating-action">
        <button onclick="startNewChat()" class="p-4 bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-600 hover:to-blue-600 text-white rounded-full shadow-2xl hover:shadow-3xl transition-all duration-300 transform hover:scale-110">
            <i class="fas fa-plus text-xl"></i>
        </button>
    </div>
</div>

<!-- New Chat Modal -->
<div id="newChatModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 hidden">
    <div class="bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-3xl p-8 w-96 max-w-full mx-4 shadow-2xl border border-white/20 dark:border-slate-700/20">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-bold text-gray-900 dark:text-white">بدء محادثة جديدة</h3>
            <button onclick="closeNewChatModal()" class="p-2 text-gray-500 hover:text-gray-700 dark:text-slate-400 dark:hover:text-slate-200 transition-colors bg-gray-100/80 dark:bg-slate-700/80 rounded-xl hover:bg-gray-200/80 dark:hover:bg-slate-600/80">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="space-y-3 max-h-80 overflow-y-auto custom-scrollbar">
            {% for user in allUsers %}
            <div class="flex items-center space-x-4 p-4 hover:bg-gray-50/80 dark:hover:bg-slate-700/80 rounded-2xl cursor-pointer transition-all duration-300 border border-gray-200/50 dark:border-slate-600/50" 
                 onclick="startChatWithUser({{ user.id }}, '{{ user.getFullName()|e('js') }}')">
                <div class="h-12 w-12 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-2xl flex items-center justify-center overflow-hidden shadow-lg">
                    <img src="/api/user/avatar/{{ user.id }}" 
                         alt="{{ user.getFullName() }}" 
                         class="w-full h-full object-cover"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                    <i class="fas fa-user text-white" style="display: none;"></i>
                </div>
                <div>
                    <h4 class="font-bold text-gray-900 dark:text-white">{{ user.getFullName() }}</h4>
                    <p class="text-sm text-gray-500 dark:text-slate-400">{{ user.email }}</p>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>

<script>
let currentChatUserId = null;
let currentChatUserName = '';

// Sound notification functions
function playNotificationSound() {
    try {
        // Create a simple notification sound using Web Audio API
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.1);
    } catch (error) {
        console.log('Could not play notification sound:', error);
    }
}

function playMessageSound() {
    try {
        // Create a different sound for messages
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        // Two-tone message sound
        oscillator.frequency.setValueAtTime(600, audioContext.currentTime);
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime + 0.05);
        oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.15);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.15);
    } catch (error) {
        console.log('Could not play message sound:', error);
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // Check for product attachment in URL
    const urlParams = new URLSearchParams(window.location.search);
    const sellerId = urlParams.get('seller');
    const productData = urlParams.get('product');
    
    if (sellerId && productData) {
        try {
            const product = JSON.parse(decodeURIComponent(productData));
            displayProductAttachment(product);
            
            // Auto-select the seller conversation
            setTimeout(() => {
                selectConversation(parseInt(sellerId), 'البائع');
                // Add product info to the message input
                addProductInfoToMessage(product);
            }, 500);
        } catch (error) {
            console.error('Error parsing product data:', error);
        }
    }
    
    // Initialize search functionality
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const conversations = document.querySelectorAll('.conversation-item');
        
        conversations.forEach(conversation => {
            const userName = conversation.querySelector('h3').textContent.toLowerCase();
            const lastMessage = conversation.querySelector('p').textContent.toLowerCase();
            
            if (userName.includes(searchTerm) || lastMessage.includes(searchTerm)) {
                conversation.style.display = 'block';
            } else {
                conversation.style.display = 'none';
            }
        });
    });
    
    // Load conversations periodically
    setInterval(loadConversations, 30000);
    
    // Handle Enter key in message input
    const messageInput = document.getElementById('messageText');
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
});

// Display product attachment
function displayProductAttachment(product) {
    // Create product attachment element
    const productAttachment = document.createElement('div');
    productAttachment.id = 'productAttachment';
    productAttachment.className = 'bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border border-blue-200 dark:border-blue-700 rounded-2xl p-4 mb-4';
    
    productAttachment.innerHTML = `
        <div class="flex items-start space-x-4">
            <div class="flex-shrink-0">
                ${product.productImage ? 
                    `<img src="${product.productImage}" alt="${product.productName}" class="w-16 h-16 object-cover rounded-xl">` :
                    `<div class="w-16 h-16 bg-gray-200 dark:bg-slate-600 rounded-xl flex items-center justify-center">
                        <i class="fas fa-image text-gray-400"></i>
                    </div>`
                }
            </div>
            <div class="flex-1">
                <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">${product.productName}</h4>
                <div class="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
                    <span class="flex items-center">
                        <i class="fas fa-tag ml-1"></i>
                        ${product.productCategory}
                    </span>
                    <span class="flex items-center">
                        <i class="fas fa-map-marker-alt ml-1"></i>
                        ${product.productCity}
                    </span>
                </div>
                <div class="mt-2">
                    <span class="text-lg font-bold text-emerald-600 dark:text-emerald-400">${product.productPrice}</span>
                </div>
            </div>
            <button onclick="removeProductAttachment()" class="flex-shrink-0 text-gray-400 hover:text-red-500 transition-colors">
                <i class="fas fa-times text-lg"></i>
            </button>
        </div>
        <div class="mt-3 pt-3 border-t border-blue-200 dark:border-blue-700">
            <p class="text-sm text-blue-700 dark:text-blue-300">
                <i class="fas fa-info-circle ml-1"></i>
                تم إرفاق تفاصيل المنتج مع الرسالة
            </p>
        </div>
    `;
    
    // Insert before message input
    const messageInput = document.getElementById('messageInput');
    messageInput.parentNode.insertBefore(productAttachment, messageInput);
}

// Add product info to message
function addProductInfoToMessage(product) {
    // Automatically send the product card immediately
    sendMessageWithProductCard(product);
    
    // Show a toast notification
    showToast('جاري إرسال تفاصيل المنتج...', 'info');
}

// Remove product attachment
function removeProductAttachment() {
    const productAttachment = document.getElementById('productAttachment');
    if (productAttachment) {
        productAttachment.remove();
    }
}

// Send message with product card
async function sendMessageWithProductCard(product) {
    if (!currentChatUserId) {
        console.error('No current chat user selected');
        return;
    }
    
    try {
        // Create a rich message with product card HTML
        const productCardHTML = `
            <div class="mb-3">
                <p class="text-sm mb-2">مرحبا! أنا مهتم بهذا المنتج:</p>
            </div>
            <div class="product-card-message bg-white dark:bg-slate-800 rounded-2xl shadow-lg border border-gray-200 dark:border-slate-700 p-4 my-2 max-w-sm">
                <div class="flex items-start space-x-3">
                    <div class="flex-shrink-0">
                        ${product.productImage ? 
                            `<img src="${product.productImage}" alt="${product.productName}" class="w-16 h-16 object-cover rounded-xl shadow-lg">` :
                            `<div class="h-16 w-16 bg-gradient-to-br from-blue-500 to-emerald-500 rounded-xl flex items-center justify-center">
                                <i class="fas fa-shopping-cart text-white text-xl"></i>
                            </div>`
                        }
                    </div>
                    <div class="flex-1">
                        <div class="flex items-center justify-between mb-2">
                            <h4 class="font-bold text-gray-900 dark:text-white text-sm">${product.productName}</h4>
                            <span class="text-xs text-blue-600 dark:text-blue-400 font-medium bg-blue-100 dark:bg-blue-900/30 px-2 py-1 rounded-full">منتج</span>
                        </div>
                        <div class="space-y-1 text-xs">
                            <div class="flex items-center space-x-1">
                                <i class="fas fa-tag text-emerald-500 text-xs"></i>
                                <span class="text-gray-600 dark:text-gray-400">${product.productCategory}</span>
                            </div>
                            <div class="flex items-center space-x-1">
                                <i class="fas fa-map-marker-alt text-emerald-500 text-xs"></i>
                                <span class="text-gray-600 dark:text-gray-400">${product.productCity}</span>
                            </div>
                        </div>
                        <div class="flex items-center justify-between mt-2">
                            <p class="text-sm font-bold text-emerald-600 dark:text-emerald-400">${product.productPrice}</p>
                            <span class="text-xs text-gray-500 dark:text-gray-400">ID: ${product.productId}</span>
                        </div>
                        ${product.productDescription ? `<p class="text-xs text-gray-600 dark:text-gray-400 mt-1">${product.productDescription}</p>` : ''}
                        <div class="mt-2 p-1 bg-blue-100 dark:bg-blue-900/30 rounded text-xs">
                            <div class="flex items-center space-x-1 text-blue-700 dark:text-blue-300">
                                <i class="fas fa-info-circle text-xs"></i>
                                <span>تم إرفاق تفاصيل المنتج مع الرسالة</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-2">
                <p class="text-sm">هل لا يزال متاحاً؟ يمكنك إرسال المزيد من التفاصيل أو الصور إذا أردت.</p>
            </div>
        `;
        
        // Send the message with product card
        const response = await apiCall('/web/send-message', {
            method: 'POST',
            body: JSON.stringify({
                receiverId: currentChatUserId,
                content: productCardHTML,
                isHTML: true // Flag to indicate this is HTML content
            })
        });
        
        // Clear the message input
        const messageInput = document.getElementById('messageText');
        messageInput.value = '';
        
        // Reload messages to show the sent message
        await loadMessages(currentChatUserId);
        
        // Show success message
        showToast('تم إرسال تفاصيل المنتج مع الصورة', 'success');
        
        // Clear product context from URL after sending product card
        const newUrl = new URL(window.location);
        newUrl.searchParams.delete('product');
        newUrl.searchParams.delete('seller');
        window.history.replaceState({}, '', newUrl);
        
        // Clear the product attachment from the page
        const productAttachment = document.getElementById('productAttachment');
        if (productAttachment) {
            productAttachment.remove();
        }
        
        // Show a notification that normal chat can now begin
        setTimeout(() => {
            showToast('تم إرسال تفاصيل المنتج. يمكنك الآن المحادثة العادية', 'info');
        }, 1500);
        
    } catch (error) {
        console.error('Failed to send message with product card:', error);
        showToast('فشل في إرسال رسالة المنتج', 'error');
    }
}

function selectConversation(userId, userName) {
    currentChatUserId = userId;
    currentChatUserName = userName;
    
    // Update UI
    document.getElementById('chatHeader').classList.remove('hidden');
    document.getElementById('messagesArea').classList.remove('hidden');
    document.getElementById('messageInput').classList.remove('hidden');
    document.getElementById('noChatSelected').classList.add('hidden');
    document.getElementById('messagesContainer').classList.remove('hidden');
    
    // Update chat header
    document.getElementById('chatUserName').textContent = userName;
    
    // Update user image
    const userImage = document.getElementById('chatUserImage');
    const userIcon = document.getElementById('chatUserIcon');
    userImage.src = `/api/user/avatar/${userId}`;
    userImage.style.display = 'block';
    userIcon.style.display = 'none';
    
    // Load messages
    loadMessages(userId);
    
    // Mark conversation as active
    document.querySelectorAll('.conversation-item').forEach(item => {
        item.classList.remove('active');
    });
    event.currentTarget.classList.add('active');
    
    // Clear unread indicators for this conversation
    clearUnreadIndicators(userId);
}

async function loadMessages(userId) {
    try {
        const response = await apiCall(`/web/conversation/${userId}`);
        displayMessages(response.messages);
        
        // Set timestamp for real-time checking
        const messages = response.messages || [];
        if (messages.length > 0) {
            const latestMessage = messages[messages.length - 1];
            lastMessageTimestamp = new Date(latestMessage.createdAt).getTime();
        }
        
        // Mark messages as read
        await apiCall(`/web/conversation/${userId}/mark-read`, { method: 'POST' });
        
        // Update messages count in header
        updateHeaderMessagesCount();
        
    } catch (error) {
        console.error('Failed to load messages:', error);
        showToast('فشل في تحميل الرسائل', 'error');
    }
}

function displayMessages(messages) {
    const container = document.getElementById('messagesContainer');
    container.innerHTML = '';
    
    let lastDate = null;
    
    messages.forEach((message, index) => {
        const messageDate = new Date(message.createdAt || message.sentAt);
        const currentDate = messageDate.toDateString();
        
        // Add date separator if this is a new day
        if (lastDate !== currentDate) {
            const dateSeparator = document.createElement('div');
            dateSeparator.className = 'flex justify-center my-6';
            dateSeparator.innerHTML = `
                <div class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm text-gray-600 dark:text-slate-400 text-sm px-4 py-2 rounded-full shadow-lg border border-gray-200/50 dark:border-slate-600/50">
                    ${formatMessageDate(message.createdAt || message.sentAt)}
                </div>
            `;
            container.appendChild(dateSeparator);
            lastDate = currentDate;
        }
        
        const messageDiv = document.createElement('div');
        const isOwnMessage = message.senderId === {{ currentUser ? currentUser.id : 'null' }};
        
        messageDiv.className = `flex ${isOwnMessage ? 'justify-end' : 'justify-start'} mb-4`;
        messageDiv.innerHTML = `
            <div class="flex items-end space-x-3 max-w-xs lg:max-w-md">
                ${!isOwnMessage ? `
                    <div class="h-10 w-10 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-2xl flex items-center justify-center overflow-hidden flex-shrink-0 shadow-lg">
                        <img src="/api/user/avatar/${message.senderId}" 
                             alt="" 
                             class="w-full h-full object-cover"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                        <i class="fas fa-user text-white text-sm" style="display: none;"></i>
                    </div>
                ` : ''}
                <div class="flex flex-col ${isOwnMessage ? 'items-end' : 'items-start'}">
                    <div class="message-bubble px-6 py-3 rounded-2xl shadow-lg ${isOwnMessage ? 
                        'bg-gradient-to-r from-emerald-500 to-blue-500 text-white rounded-br-md' : 
                        'bg-white/90 dark:bg-slate-700/90 backdrop-blur-sm text-gray-900 dark:text-white rounded-bl-md border border-gray-200/50 dark:border-slate-600/50'
                    }">
                        ${message.isHtml ? 
                            `<div class="message-html-content">${message.content}</div>` : 
                            `<p class="text-sm leading-relaxed">${message.content}</p>`
                        }
                        ${message.hasAttachment ? 
                            `<div class="mt-3">
                                <img src="/web/message/${message.id}/attachment" 
                                     alt="${message.attachmentName || 'Attachment'}" 
                                     class="max-w-xs rounded-lg shadow-md cursor-pointer hover:shadow-lg transition-shadow"
                                     onclick="openImageModal('/web/message/${message.id}/attachment')">
                            </div>` : ''
                        }
                    </div>
                    <div class="flex items-center space-x-2 mt-2">
                        <span class="text-xs text-gray-500 dark:text-slate-400">${formatMessageTime(message.createdAt || message.sentAt)}</span>
                    </div>
                </div>
                ${isOwnMessage ? `
                    <div class="h-10 w-10 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-2xl flex items-center justify-center overflow-hidden flex-shrink-0 shadow-lg">
                        <img src="/api/user/avatar/{{ currentUser ? currentUser.id : '' }}" 
                             alt="" 
                             class="w-full h-full object-cover"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                        <i class="fas fa-user text-white text-sm" style="display: none;"></i>
                    </div>
                ` : ''}
            </div>
        `;
        
        container.appendChild(messageDiv);
    });
    
    // Scroll to bottom
    container.scrollTop = container.scrollHeight;
}

async function sendMessage() {
    const messageInput = document.getElementById('messageText');
    let content = messageInput.value.trim();
    
    if (!content || !currentChatUserId) return;
    
    // Check if we have product context and this is the first message
    const urlParams = new URLSearchParams(window.location.search);
    const productData = urlParams.get('product');
    let isFirstMessage = false;
    
    if (productData) {
        try {
            const product = JSON.parse(decodeURIComponent(productData));
            
            // Check if this is the first message in this conversation
            const messagesContainer = document.getElementById('messagesContainer');
            const existingMessages = messagesContainer.querySelectorAll('.message-bubble');
            isFirstMessage = existingMessages.length === 0;
            
            // If this is the first message and contains product inquiry, send as HTML card
            if (isFirstMessage && content.includes('أنا مهتم بالمنتج التالي')) {
                await sendMessageWithProductCard(product);
                return;
            }
            
            // For subsequent messages, send normally without product details
            if (!isFirstMessage) {
                // Remove product context from URL after first message
                const newUrl = new URL(window.location);
                newUrl.searchParams.delete('product');
                newUrl.searchParams.delete('seller');
                window.history.replaceState({}, '', newUrl);
            }
        } catch (error) {
            console.error('Error parsing product data:', error);
        }
    }
    
    try {
        const response = await apiCall('/web/send-message', {
            method: 'POST',
            body: JSON.stringify({
                receiverId: currentChatUserId,
                content: content
            })
        });
        
        // Clear input
        messageInput.value = '';
        
        // Reload messages
        await loadMessages(currentChatUserId);
        
        // Show success
        showToast('تم إرسال الرسالة', 'success');
        
    } catch (error) {
        console.error('Failed to send message:', error);
        showToast('فشل في إرسال الرسالة', 'error');
    }
}

function startNewChat() {
    document.getElementById('newChatModal').classList.remove('hidden');
}

function closeNewChatModal() {
    document.getElementById('newChatModal').classList.add('hidden');
}

function startChatWithUser(userId, userName) {
    closeNewChatModal();
    selectConversation(userId, userName);
}

async function loadConversations() {
    try {
        const response = await apiCall('/web/conversations');
        // Update conversations list if needed
        // This could be enhanced to update the UI dynamically
    } catch (error) {
        console.error('Failed to load conversations:', error);
    }
}

function formatMessageTime(timestamp) {
    if (!timestamp) return '--:--';
    
    // Try different date formats
    let time = new Date(timestamp);
    
    // If the first attempt fails, try parsing as ISO string
    if (isNaN(time.getTime())) {
        time = new Date(timestamp.replace(' ', 'T'));
    }
    
    // If still invalid, try parsing manually
    if (isNaN(time.getTime())) {
        const parts = timestamp.split(' ');
        if (parts.length >= 2) {
            const datePart = parts[0];
            const timePart = parts[1];
            time = new Date(datePart + 'T' + timePart);
        }
    }
    
    if (isNaN(time.getTime())) {
        return '--:--';
    }
    
    const hours = time.getHours();
    const minutes = time.getMinutes();
    const ampm = hours >= 12 ? 'م' : 'ص';
    const displayHours = hours % 12 || 12;
    const displayMinutes = minutes.toString().padStart(2, '0');
    
    return `${displayHours}:${displayMinutes} ${ampm}`;
}

function formatMessageDate(timestamp) {
    if (!timestamp) return 'تاريخ غير صحيح';
    
    const now = new Date();
    let time = new Date(timestamp);
    
    // Try different date formats
    if (isNaN(time.getTime())) {
        time = new Date(timestamp.replace(' ', 'T'));
    }
    
    if (isNaN(time.getTime())) {
        const parts = timestamp.split(' ');
        if (parts.length >= 2) {
            const datePart = parts[0];
            const timePart = parts[1];
            time = new Date(datePart + 'T' + timePart);
        }
    }
    
    if (isNaN(time.getTime())) {
        return 'تاريخ غير صحيح';
    }
    
    const diff = now - time;
    
    // If it's today
    if (diff < 86400000 && time.toDateString() === now.toDateString()) {
        return 'اليوم';
    }
    
    // If it's yesterday
    const yesterday = new Date(now);
    yesterday.setDate(yesterday.getDate() - 1);
    if (time.toDateString() === yesterday.toDateString()) {
        return 'أمس';
    }
    
    // If it's this week
    const weekAgo = new Date(now);
    weekAgo.setDate(weekAgo.getDate() - 7);
    if (time > weekAgo) {
        const days = ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];
        return days[time.getDay()];
    }
    
    // Otherwise show the full date
    return time.toLocaleDateString('ar-SA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

// Toast notification function
function showToast(message, type = 'info') {
    // Create toast element
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-2xl text-white font-medium shadow-2xl transform transition-all duration-300 ${
        type === 'success' ? 'bg-emerald-500' : 
        type === 'error' ? 'bg-red-500' : 
        type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
    }`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
        toast.style.transform = 'translateX(0)';
        toast.style.opacity = '1';
    }, 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
        toast.style.transform = 'translateX(100%)';
        toast.style.opacity = '0';
        setTimeout(() => {
            document.body.removeChild(toast);
        }, 300);
    }, 3000);
}

// Auto-start conversation with seller if product data is provided
document.addEventListener('DOMContentLoaded', function() {
    {% if product and seller %}
    // Auto-select the seller conversation
    setTimeout(() => {
        selectConversation({{ seller.id }}, '{{ seller.firstName }} {{ seller.lastName }}');
        
        // Pre-fill message with product inquiry
        const messageInput = document.getElementById('messageText');
        if (messageInput) {
            messageInput.placeholder = 'مرحباً، هل هذا المنتج متاح؟ {{ product.productName }}';
        }
        
        // Show product info in chat
        showProductInChat({{ product|json_encode|raw }});
    }, 500);
    {% endif %}
    
    // Start real-time messaging
    startRealTimeMessaging();
});

// Function to show product information in chat
function showProductInChat(product) {
    const messagesContainer = document.getElementById('messagesContainer');
    if (!messagesContainer) return;
    
    const productCard = document.createElement('div');
    productCard.className = 'mb-4 p-4 bg-gradient-to-r from-blue-50 to-emerald-50 dark:from-blue-900/20 dark:to-emerald-900/20 rounded-2xl border border-blue-200 dark:border-blue-700';
    productCard.innerHTML = `
        <div class="flex items-start space-x-3">
            <div class="flex-shrink-0">
                ${product.productImage ? 
                    `<img src="${product.productImage}" alt="${product.productName}" class="w-16 h-16 object-cover rounded-xl shadow-lg">` :
                    `<div class="h-16 w-16 bg-gradient-to-br from-blue-500 to-emerald-500 rounded-xl flex items-center justify-center">
                        <i class="fas fa-shopping-cart text-white text-xl"></i>
                    </div>`
                }
            </div>
            <div class="flex-1">
                <div class="flex items-center justify-between mb-2">
                    <h4 class="font-bold text-gray-900 dark:text-white text-lg">${product.productName}</h4>
                    <span class="text-sm text-blue-600 dark:text-blue-400 font-medium bg-blue-100 dark:bg-blue-900/30 px-2 py-1 rounded-full">منتج مرفق</span>
                </div>
                <div class="grid grid-cols-2 gap-2 text-sm mb-2">
                    <div class="flex items-center space-x-1">
                        <i class="fas fa-tag text-emerald-500 text-xs"></i>
                        <span class="text-gray-600 dark:text-gray-400">${product.productCategory}</span>
                    </div>
                    <div class="flex items-center space-x-1">
                        <i class="fas fa-map-marker-alt text-emerald-500 text-xs"></i>
                        <span class="text-gray-600 dark:text-gray-400">${product.productCity}</span>
                    </div>
                </div>
                <div class="flex items-center justify-between">
                    <p class="text-lg font-bold text-emerald-600 dark:text-emerald-400">${product.productPrice}</p>
                    <span class="text-xs text-gray-500 dark:text-gray-400">ID: ${product.productId}</span>
                </div>
                ${product.productDescription ? `<p class="text-sm text-gray-600 dark:text-gray-400 mt-2">${product.productDescription}</p>` : ''}
                <div class="mt-3 p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                    <div class="flex items-center space-x-2 text-blue-700 dark:text-blue-300 text-sm">
                        <i class="fas fa-info-circle"></i>
                        <span>تم إرفاق تفاصيل المنتج مع الرسالة</span>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    messagesContainer.appendChild(productCard);
}

// Update messages count in header
async function updateHeaderMessagesCount() {
    try {
        const response = await apiCall('/web/conversations');
        const count = response.unreadCount || 0;
        
        // Update badge in header if it exists
        const badge = document.getElementById('messagesCount');
        if (badge) {
            if (count > 0) {
                badge.textContent = count > 99 ? '99+' : count;
                badge.classList.remove('hidden');
            } else {
                badge.classList.add('hidden');
            }
        }
    } catch (error) {
        console.error('Error updating header messages count:', error);
    }
}

// Real-time messaging system
let realTimeInterval;
let lastMessageTimestamp = 0;

function startRealTimeMessaging() {
    console.log('Starting real-time messaging system');
    // Check for new messages every 3 seconds
    realTimeInterval = setInterval(async () => {
        await checkForNewMessages();
        // Update conversations list every 3 seconds
        await updateConversationsList();
    }, 3000);
}

// Test function to manually trigger real-time check
function testRealTimeMessages() {
    console.log('Testing real-time messages...');
    checkForNewMessages();
}

async function checkForNewMessages() {
    if (!currentChatUserId) {
        console.log('No current chat user, skipping real-time check');
        return;
    }
    
    try {
        console.log('Checking for new messages for user:', currentChatUserId);
        const response = await apiCall(`/web/conversation/${currentChatUserId}`);
        const messages = response.messages || [];
        console.log('Received messages:', messages.length);
        
        // Check if there are new messages
        const latestMessage = messages[messages.length - 1];
        if (latestMessage && new Date(latestMessage.createdAt).getTime() > lastMessageTimestamp) {
            console.log('New message detected!');
            // Update timestamp
            lastMessageTimestamp = new Date(latestMessage.createdAt).getTime();
            
            // Play sound for new message
            playMessageSound();
            
            // Reload messages to show new ones
            displayMessages(messages);
            
            // Scroll to bottom to show new message
            const messagesContainer = document.getElementById('messagesContainer');
            if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            // Show notification if not in current chat
            if (document.hidden || !document.hasFocus()) {
                showToast(`رسالة جديدة من ${currentChatUserName}`, 'info');
            }
            
            // Update header count
            updateHeaderMessagesCount();
        }
    } catch (error) {
        console.error('Error checking for new messages:', error);
        if (error.message === 'Authentication required') {
            console.log('User not authenticated, stopping real-time updates');
            if (realTimeInterval) {
                clearInterval(realTimeInterval);
            }
        }
    }
}

// Stop real-time messaging when leaving page
window.addEventListener('beforeunload', () => {
    if (realTimeInterval) {
        clearInterval(realTimeInterval);
    }
});

// Handle image upload
function handleImageUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    if (!file.type.startsWith('image/')) {
        showToast('يرجى اختيار ملف صورة فقط', 'error');
        return;
    }
    
    if (file.size > 5 * 1024 * 1024) { // 5MB limit
        showToast('حجم الملف كبير جداً. الحد الأقصى 5 ميجابايت', 'error');
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
        sendImageMessage(file, e.target.result);
    };
    reader.readAsDataURL(file);
}

// Send image message
async function sendImageMessage(file, base64Data) {
    if (!currentChatUserId) {
        showToast('يرجى اختيار محادثة أولاً', 'error');
        return;
    }
    
    try {
        showToast('جاري إرسال الصورة...', 'info');
        
        const response = await apiCall('/web/send-message', {
            method: 'POST',
            body: JSON.stringify({
                receiverId: currentChatUserId,
                content: `📷 ${file.name}`,
                attachment: base64Data.split(',')[1], // Remove data:image/...;base64, prefix
                attachmentMimeType: file.type,
                attachmentName: file.name
            })
        });
        
        // Clear file input
        document.getElementById('imageInput').value = '';
        
        // Reload messages
        await loadMessages(currentChatUserId);
        
        showToast('تم إرسال الصورة بنجاح', 'success');
        
    } catch (error) {
        console.error('Failed to send image:', error);
        showToast('فشل في إرسال الصورة', 'error');
    }
}

// Open image modal
function openImageModal(imageUrl) {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4';
    modal.innerHTML = `
        <div class="relative max-w-4xl max-h-full">
            <img src="${imageUrl}" alt="Image" class="max-w-full max-h-full rounded-lg shadow-2xl">
            <button onclick="this.closest('.fixed').remove()" class="absolute top-4 right-4 bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
    `;
    document.body.appendChild(modal);
    
    // Close on background click
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// Mark message as seen
async function markMessageAsSeen(messageId) {
    try {
        await apiCall(`/web/message/${messageId}/mark-seen`, { method: 'POST' });
    } catch (error) {
        console.error('Failed to mark message as seen:', error);
    }
}

// Update user status
async function updateUserStatus(isOnline) {
    try {
        await apiCall('/web/user/update-status', {
            method: 'POST',
            body: JSON.stringify({ isOnline: isOnline })
        });
    } catch (error) {
        console.error('Failed to update user status:', error);
    }
}

// Clear unread indicators for a conversation
function clearUnreadIndicators(userId) {
    const conversationItem = document.querySelector(`[data-user-id="${userId}"]`);
    if (conversationItem) {
        // Remove unread badge
        const unreadBadge = conversationItem.querySelector('.bg-gradient-to-r.from-emerald-500.to-blue-500');
        if (unreadBadge) {
            unreadBadge.remove();
        }
        
        // Remove "جديد" indicator
        const newIndicator = conversationItem.querySelector('.bg-gradient-to-r.from-emerald-500.to-blue-500.text-white.px-2.py-1.rounded-full');
        if (newIndicator) {
            newIndicator.remove();
        }
        
        // Reset background and text styling
        conversationItem.className = conversationItem.className.replace(/bg-gradient-to-r from-emerald-50 to-blue-50 dark:from-emerald-900\/20 dark:to-blue-900\/20 border-l-4 border-emerald-500/g, 'bg-white/60 dark:bg-slate-700/60');
        
        // Reset message text styling
        const messageText = conversationItem.querySelector('p');
        if (messageText) {
            messageText.className = messageText.className.replace(/text-gray-900 dark:text-white font-semibold/g, 'text-gray-600 dark:text-slate-300');
        }
    }
}

// Update conversation list with real-time data
async function updateConversationsList() {
    try {
        const response = await apiCall('/web/conversations');
        const conversations = response.conversations || [];
        
        // Update each conversation item
        conversations.forEach(conversation => {
            const conversationItem = document.querySelector(`[data-user-id="${conversation.otherUserId}"]`);
            if (conversationItem) {
                // Update timestamp
                const timestampElement = conversationItem.querySelector('span.text-xs.text-gray-500');
                if (timestampElement) {
                    const date = new Date(conversation.lastMessageSentAt);
                    timestampElement.textContent = date.toLocaleTimeString('ar-SA', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                    });
                }
                
                // Update message content
                const messageElement = conversationItem.querySelector('p');
                if (messageElement) {
                    messageElement.textContent = conversation.lastMessageContent;
                }
                
                // Update unread count
                if (conversation.unreadCount > 0) {
                    // Add unread styling if not already present
                    if (!conversationItem.classList.contains('bg-gradient-to-r')) {
                        conversationItem.className += ' bg-gradient-to-r from-emerald-50 to-blue-50 dark:from-emerald-900/20 dark:to-blue-900/20 border-l-4 border-emerald-500';
                    }
                    
                    // Update or add unread badge
                    let unreadBadge = conversationItem.querySelector('.bg-gradient-to-r.from-emerald-500.to-blue-500.text-white.text-xs.rounded-full');
                    if (!unreadBadge) {
                        const badgeContainer = conversationItem.querySelector('.flex-shrink-0');
                        if (badgeContainer) {
                            badgeContainer.innerHTML = `
                                <div class="bg-gradient-to-r from-emerald-500 to-blue-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center font-bold shadow-lg animate-pulse">
                                    ${conversation.unreadCount > 99 ? '99+' : conversation.unreadCount}
                                </div>
                            `;
                        }
                    }
                    
                    // Add "جديد" indicator if not present
                    const nameContainer = conversationItem.querySelector('h3').parentElement;
                    if (nameContainer && !nameContainer.querySelector('.bg-gradient-to-r.from-emerald-500.to-blue-500.text-white.px-2.py-1.rounded-full')) {
                        const newIndicator = document.createElement('span');
                        newIndicator.className = 'text-xs bg-gradient-to-r from-emerald-500 to-blue-500 text-white px-2 py-1 rounded-full font-bold animate-pulse';
                        newIndicator.textContent = 'جديد';
                        nameContainer.appendChild(newIndicator);
                    }
                    
                    // Update message text styling
                    const messageText = conversationItem.querySelector('p');
                    if (messageText) {
                        messageText.className = messageText.className.replace(/text-gray-600 dark:text-slate-300/g, 'text-gray-900 dark:text-white font-semibold');
                    }
                } else {
                    // Clear unread indicators
                    clearUnreadIndicators(conversation.otherUserId);
                }
            }
        });
    } catch (error) {
        console.error('Failed to update conversations list:', error);
    }
}
</script>
{% endblock %}