<!-- Notification Dropdown Component -->
<div class="relative" id="notificationDropdown">
    <!-- Notification Bell Button -->
    <button 
        id="notificationBell" 
        class="relative p-2 text-gray-600 dark:text-white hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 rounded-lg"
        onclick="toggleNotificationDropdown()"
    >
        <i class="fas fa-bell text-xl"></i>
        <!-- Unread Badge -->
        <span 
            id="notificationBadge" 
            class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center hidden"
        >
            <span id="notificationCount">0</span>
        </span>
    </button>

    <!-- Notification Dropdown -->
    <div 
        id="notificationPanel" 
        class="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50 hidden"
    >
        <!-- Header -->
        <div class="p-4 border-b border-gray-200 bg-gray-50 rounded-t-lg">
            <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900">الإشعارات</h3>
                <div class="flex items-center space-x-2 space-x-reverse">
                    <button 
                        id="markAllReadBtn" 
                        class="text-sm text-primary-600 hover:text-primary-700 font-medium"
                        onclick="markAllNotificationsAsRead()"
                    >
                        تعيين الكل كمقروء
                    </button>
                    <button 
                        class="text-sm text-gray-500 hover:text-gray-700"
                        onclick="openNotificationSettings()"
                    >
                        <i class="fas fa-cog"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Notifications List -->
        <div id="notificationsList" class="max-h-96 overflow-y-auto">
            <!-- Loading State -->
            <div id="notificationsLoading" class="p-4 text-center">
                <div class="inline-flex items-center">
                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-600"></div>
                    <span class="mr-2 text-gray-600">جاري التحميل...</span>
                </div>
            </div>

            <!-- Empty State -->
            <div id="notificationsEmpty" class="p-8 text-center hidden">
                <i class="fas fa-bell-slash text-4xl text-gray-300 mb-4"></i>
                <p class="text-gray-500">لا توجد إشعارات جديدة</p>
            </div>

            <!-- Notifications will be loaded here -->
        </div>

        <!-- Footer -->
        <div class="p-3 border-t border-gray-200 bg-gray-50 rounded-b-lg">
            <a 
                href="/notifications" 
                class="block text-center text-sm text-primary-600 hover:text-primary-700 font-medium"
            >
                عرض جميع الإشعارات
            </a>
        </div>
    </div>
</div>

<!-- Notification Item Template (Hidden) -->
<template id="notificationItemTemplate">
    <div class="notification-item p-4 border-b border-gray-100 hover:bg-gradient-to-l hover:from-gray-50 hover:to-white transition-all duration-300 cursor-pointer group" data-notification-id="">
        <div class="flex items-start space-x-3 space-x-reverse">
            <!-- Avatar/Icon -->
            <div class="flex-shrink-0 relative">
                <div class="notification-avatar w-12 h-12 rounded-full overflow-hidden bg-gradient-to-br from-primary-500 to-primary-600 flex items-center justify-center text-white shadow-md group-hover:shadow-lg transition-shadow duration-300">
                    <img class="notification-user-image w-full h-full object-cover hidden" src="" alt="">
                    <i class="notification-icon text-lg"></i>
                </div>
                <div class="notification-status absolute -bottom-1 -right-1">
                    <span class="unread-dot w-3 h-3 bg-red-500 rounded-full border-2 border-white shadow-sm"></span>
                </div>
            </div>
            
            <!-- Content -->
            <div class="flex-1 min-w-0">
                <div class="flex items-start justify-between gap-2">
                    <div class="flex-1">
                        <h4 class="notification-title text-sm font-semibold text-gray-900 mb-1"></h4>
                        <p class="notification-message text-sm text-gray-600 line-clamp-2 leading-relaxed"></p>
                    </div>
                    <span class="notification-time text-xs text-gray-400 whitespace-nowrap"></span>
                </div>
                
                <!-- User Info for Follow Notifications -->
                <div class="notification-user-info hidden mt-3 p-3 bg-gradient-to-r from-gray-50 to-transparent rounded-lg border border-gray-100">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2 space-x-reverse">
                            <img class="user-info-avatar w-8 h-8 rounded-full object-cover border-2 border-white shadow-sm" src="" alt="">
                            <div>
                                <p class="user-info-name text-sm font-semibold text-gray-900"></p>
                                <p class="user-info-email text-xs text-gray-500"></p>
                            </div>
                        </div>
                        <button class="follow-back-btn px-4 py-1.5 bg-primary-600 hover:bg-primary-700 text-white text-xs font-medium rounded-full transition-all duration-200 hover:shadow-md transform hover:scale-105">
                            <i class="fas fa-user-plus ml-1"></i>
                            متابعة
                        </button>
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div class="notification-actions mt-3 flex items-center space-x-2 space-x-reverse">
                    <button class="notification-action-btn px-3 py-1.5 bg-primary-600 hover:bg-primary-700 text-white text-xs font-medium rounded-lg transition-all duration-200 hover:shadow-md hidden">
                        <i class="action-icon fas fa-arrow-left ml-1"></i>
                        <span class="action-text"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</template>

<style>
/* Notification Styles */
.notification-item.unread {
    background: linear-gradient(to left, #f0f9ff 0%, #ffffff 100%);
    border-right: 4px solid #3b82f6;
}

.notification-item.important {
    background: linear-gradient(to left, #fef2f2 0%, #ffffff 100%);
    border-right: 4px solid #ef4444;
}

.notification-item.read {
    opacity: 0.75;
}

.notification-item.read .unread-dot {
    display: none;
}

.line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

/* Animation for new notifications */
@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes pulse {
    0%, 100% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.1);
    }
}

.notification-item.new {
    animation: slideInRight 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.unread-dot {
    animation: pulse 2s infinite;
}

/* Notification type colors with gradients */
.notification-avatar.message { 
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
}
.notification-avatar.follow { 
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
}
.notification-avatar.product { 
    background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
}
.notification-avatar.order { 
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
}
.notification-avatar.review { 
    background: linear-gradient(135deg, #eab308 0%, #ca8a04 100%);
}
.notification-avatar.system { 
    background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
}
.notification-avatar.security { 
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
}
.notification-avatar.promotion { 
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
}

/* Hover effects */
.notification-item:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.notification-item:hover .notification-avatar {
    transform: scale(1.05);
}

/* Dropdown improvements */
#notificationPanel {
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
}

/* Loading animation */
@keyframes spin {
    to { transform: rotate(360deg); }
}
</style>

<script>
// Notification Dropdown JavaScript
let notificationDropdownOpen = false;
let notifications = [];
let unreadCount = 0;

// Toggle notification dropdown
function toggleNotificationDropdown() {
    const panel = document.getElementById('notificationPanel');
    const bell = document.getElementById('notificationBell');
    
    if (notificationDropdownOpen) {
        panel.classList.add('hidden');
        bell.classList.remove('ring-2', 'ring-primary-500');
    } else {
        panel.classList.remove('hidden');
        bell.classList.add('ring-2', 'ring-primary-500');
        loadNotifications();
    }
    
    notificationDropdownOpen = !notificationDropdownOpen;
}

// Load notifications
async function loadNotifications() {
    try {
        const response = await fetch('/app/notifications/unread?limit=10', {
            credentials: 'same-origin',
            headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        notifications = data.notifications || [];
        unreadCount = data.unread_count || 0;
        
        updateNotificationBadge();
        renderNotifications();
        
    } catch (error) {
        console.error('Error loading notifications:', error);
        showNotificationError();
    }
}

// Render notifications
function renderNotifications() {
    const container = document.getElementById('notificationsList');
    const loading = document.getElementById('notificationsLoading');
    const empty = document.getElementById('notificationsEmpty');
    
    loading.classList.add('hidden');
    
    if (notifications.length === 0) {
        empty.classList.remove('hidden');
        return;
    }
    
    empty.classList.add('hidden');
    
    // Clear existing notifications
    container.innerHTML = '';
    
    notifications.forEach(notification => {
        const item = createNotificationItem(notification);
        container.appendChild(item);
    });
}

// Create notification item
function createNotificationItem(notification) {
    const template = document.getElementById('notificationItemTemplate');
    const item = template.content.cloneNode(true);
    
    const itemElement = item.querySelector('.notification-item');
    const avatar = item.querySelector('.notification-avatar');
    const userImage = item.querySelector('.notification-user-image');
    const icon = item.querySelector('.notification-icon');
    const title = item.querySelector('.notification-title');
    const message = item.querySelector('.notification-message');
    const time = item.querySelector('.notification-time');
    const actionBtn = item.querySelector('.notification-action-btn');
    const actionText = item.querySelector('.action-text');
    const actionIcon = item.querySelector('.action-icon');
    const userInfo = item.querySelector('.notification-user-info');
    const userInfoAvatar = item.querySelector('.user-info-avatar');
    const userInfoName = item.querySelector('.user-info-name');
    const userInfoEmail = item.querySelector('.user-info-email');
    const followBackBtn = item.querySelector('.follow-back-btn');
    
    // Set notification data
    itemElement.setAttribute('data-notification-id', notification.id);
    itemElement.onclick = () => handleNotificationClick(notification);
    
    // Set avatar/icon
    avatar.classList.add(notification.type);
    
    // Check if we have user image in metadata
    if (notification.metadata && notification.metadata.sender_image) {
        userImage.src = notification.metadata.sender_image;
        userImage.classList.remove('hidden');
        icon.classList.add('hidden');
    } else if (notification.metadata && notification.metadata.follower_image) {
        userImage.src = notification.metadata.follower_image;
        userImage.classList.remove('hidden');
        icon.classList.add('hidden');
    } else if (notification.metadata && notification.metadata.seller_image) {
        userImage.src = notification.metadata.seller_image;
        userImage.classList.remove('hidden');
        icon.classList.add('hidden');
    } else {
        icon.className = `notification-icon ${notification.icon || 'fas fa-bell'}`;
    }
    
    // Set content
    title.textContent = notification.title;
    message.textContent = notification.message;
    time.textContent = formatNotificationTime(notification.createdAt);
    
    // Handle follow notifications - show user info and follow back button
    if (notification.type === 'follow' && notification.metadata) {
        userInfo.classList.remove('hidden');
        
        // Set user info
        const followerName = notification.metadata.follower_name || 'مستخدم';
        const followerId = notification.metadata.follower_id;
        const followerImage = notification.metadata.follower_image || '/images/default-avatar.png';
        
        userInfoAvatar.src = followerImage;
        userInfoName.textContent = followerName;
        userInfoEmail.textContent = `@user${followerId}`;
        
        // Follow back button
        followBackBtn.onclick = (e) => {
            e.stopPropagation();
            followUser(followerId, followBackBtn);
        };
    }
    
    // Set action button
    if (notification.actionUrl && notification.actionText) {
        actionBtn.classList.remove('hidden');
        actionText.textContent = notification.actionText;
        
        // Set appropriate icon based on type
        if (notification.type === 'message') {
            actionIcon.className = 'action-icon fas fa-envelope ml-1';
        } else if (notification.type === 'product') {
            actionIcon.className = 'action-icon fas fa-box ml-1';
        } else if (notification.type === 'order') {
            actionIcon.className = 'action-icon fas fa-shopping-cart ml-1';
        } else {
            actionIcon.className = 'action-icon fas fa-arrow-left ml-1';
        }
        
        actionBtn.onclick = (e) => {
            e.stopPropagation();
            window.location.href = notification.actionUrl;
        };
    }
    
    // Set status classes
    if (!notification.isRead) {
        itemElement.classList.add('unread');
    } else {
        itemElement.classList.add('read');
    }
    
    if (notification.isImportant) {
        itemElement.classList.add('important');
    }
    
    return item;
}

// Follow user function
async function followUser(userId, button) {
    try {
        const response = await fetch(`/follow/${userId}`, {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        if (response.ok) {
            button.innerHTML = '<i class="fas fa-check ml-1"></i> تمت المتابعة';
            button.classList.remove('bg-primary-600', 'hover:bg-primary-700');
            button.classList.add('bg-green-500', 'cursor-default');
            button.disabled = true;
        }
    } catch (error) {
        console.error('Error following user:', error);
        button.innerHTML = '<i class="fas fa-times ml-1"></i> خطأ';
        button.classList.add('bg-red-500');
    }
}

// Handle notification click
function handleNotificationClick(notification) {
    // Mark as read
    markNotificationAsRead(notification.id);
    
    // Navigate to action URL if available
    if (notification.actionUrl) {
        window.location.href = notification.actionUrl;
    }
}

// Mark notification as read
async function markNotificationAsRead(notificationId) {
    try {
        await fetch(`/app/notifications/${notificationId}/read`, {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        // Update local state
        const notification = notifications.find(n => n.id === notificationId);
        if (notification) {
            notification.isRead = true;
            unreadCount = Math.max(0, unreadCount - 1);
            updateNotificationBadge();
            renderNotifications();
        }
        
    } catch (error) {
        console.error('Error marking notification as read:', error);
    }
}

// Mark all notifications as read
async function markAllNotificationsAsRead() {
    try {
        await fetch('/app/notifications/mark-all-read', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        // Update local state
        notifications.forEach(notification => {
            notification.isRead = true;
        });
        unreadCount = 0;
        updateNotificationBadge();
        renderNotifications();
        
    } catch (error) {
        console.error('Error marking all notifications as read:', error);
    }
}

// Update notification badge
function updateNotificationBadge() {
    const badge = document.getElementById('notificationBadge');
    const count = document.getElementById('notificationCount');
    
    if (unreadCount > 0) {
        badge.classList.remove('hidden');
        count.textContent = unreadCount > 99 ? '99+' : unreadCount;
    } else {
        badge.classList.add('hidden');
    }
}

// Format notification time
function formatNotificationTime(createdAt) {
    const now = new Date();
    const notificationTime = new Date(createdAt);
    const diffInMinutes = Math.floor((now - notificationTime) / (1000 * 60));
    
    if (diffInMinutes < 1) {
        return 'الآن';
    } else if (diffInMinutes < 60) {
        return `منذ ${diffInMinutes} دقيقة`;
    } else if (diffInMinutes < 1440) {
        const hours = Math.floor(diffInMinutes / 60);
        return `منذ ${hours} ساعة`;
    } else {
        const days = Math.floor(diffInMinutes / 1440);
        return `منذ ${days} يوم`;
    }
}

// Show notification error
function showNotificationError() {
    const container = document.getElementById('notificationsList');
    const loading = document.getElementById('notificationsLoading');
    
    loading.classList.add('hidden');
    container.innerHTML = `
        <div class="p-4 text-center text-red-600">
            <i class="fas fa-exclamation-triangle text-2xl mb-2"></i>
            <p>حدث خطأ في تحميل الإشعارات</p>
        </div>
    `;
}

// Open notification settings
function openNotificationSettings() {
    // TODO: Implement notification settings
    console.log('Opening notification settings...');
}

// Close dropdown when clicking outside
document.addEventListener('click', function(event) {
    const dropdown = document.getElementById('notificationDropdown');
    if (!dropdown.contains(event.target)) {
        const panel = document.getElementById('notificationPanel');
        panel.classList.add('hidden');
        notificationDropdownOpen = false;
    }
});

// Auto-refresh notifications every 30 seconds
setInterval(() => {
    if (notificationDropdownOpen) {
        loadNotifications();
    }
}, 30000);

// Load initial notification count
document.addEventListener('DOMContentLoaded', function() {
    loadNotificationCount();
});

// Load notification count only
async function loadNotificationCount() {
    try {
        const response = await fetch('/app/notifications/unread-count', {
            credentials: 'same-origin',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        if (!response.ok) {
            // If 404 or any error, default to 0
            unreadCount = 0;
            updateNotificationBadge();
            return;
        }
        
        const data = await response.json();
        unreadCount = data.count || data.unread_count || 0;
        updateNotificationBadge();
    } catch (error) {
        console.error('Error loading notification count:', error);
        unreadCount = 0;
        updateNotificationBadge();
    }
}
</script>
